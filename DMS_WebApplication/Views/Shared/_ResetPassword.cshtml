@model DMS_BOL.Validation_Classes.ValidateUsersLogin
@{
    Layout = null;
}

<div class="card card-primary" id="DivUpdate">
    <div class="card-header">
        <h4>Reset Password</h4>
    </div>
    <div class="card-body">
        @if (TempData["ErrorMsg"] != null)
        {
            <div class="alert alert-danger alert-dismissible show fade">
                <div class="alert-body" id="loginerrorAlert">
                    <button class="close" data-dismiss="alert">
                        <span>×</span>
                    </button>
                    @Html.Raw(TempData["ErrorMsg"])
                </div>
            </div>
        }
        @if (TempData["SuccessMsg"] != null)
        {
            <div class="alert alert-success alert-dismissible show fade">
                <div class="alert-body">
                    <button class="close" data-dismiss="alert">
                        <span>×</span>
                    </button>
                    @Html.Raw(TempData["SuccessMsg"])
                </div>
            </div>
        }
        @using (Ajax.BeginForm("ResetPass", "Account", new AjaxOptions()
        {
            HttpMethod = "POST",
            InsertionMode = InsertionMode.ReplaceWith,
            UpdateTargetId = "DivUpdate",
            LoadingElementId = "loader",
            OnSuccess = "ResetPassSuccess",
        }))
        {
            <div class="form-group">
                <label>Enter your new Password</label>
                @Html.ValidationMessageFor(model => model.UserPasswordForReset, "", new { @class = "text-danger" })
                @Html.PasswordFor(model => model.UserPasswordForReset, htmlAttributes: new { placeholder = "Enter your new Password", @class = "form-control", @tabindex = "1", @pattern = @"^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[@#$%^&*!])[A-Za-z\d@#$%^&*!]{8,}$", @title = "Password should contain minimum 8 characters in length and At least one uppercase, lowercase English letter and one digit and special character", @required = "required" })
            </div>
            <div class="form-group">
                <label>Confirm your new Password</label>
                @Html.ValidationMessageFor(model => model.UserConfirmPassword, "", new { @class = "text-danger" })
                <br /><span id="passwordMatchMessage"></span>
                @Html.PasswordFor(model => model.UserConfirmPassword, htmlAttributes: new { placeholder = "Confirm your new Password", @class = "form-control", @tabindex = "2", @required = "required" })
            </div>
            <div class="form-group">
                <input type="submit" id="submitButton" class="btn btn-primary btn-lg btn-block" value="Reset Account Password" tabindex="3" />
            </div>
        }
    </div>
</div>
<script>

    function ResetPassSuccess(data) {
        if (data.message == "yes") {
            window.location.href = "/Account/SignIn"
        } else if (data.message == "no") {
            window.location.href = "/Account/SignUp"
        } else if (data.message == "error") {
            window.location.href = "/Account/SignIn"
        }
    }

    var passwordInput = document.getElementById("UserPasswordForReset");
    var confirmPasswordInput = document.getElementById("UserConfirmPassword");

    var passwordMatchMessage = document.getElementById("passwordMatchMessage");
    var submitButton = document.getElementById("submitButton");

    function checkPasswordMatch() {
        var password = passwordInput.value;
        var confirmPassword = confirmPasswordInput.value;

        if (passwordInput.value.length > 0) {
            document.querySelector('[data-valmsg-for="UserPasswordForReset"]').textContent = "";
        }

        if (confirmPasswordInput.value.length > 0) {
            document.querySelector('[data-valmsg-for="UserConfirmPassword"]').textContent = "";
        }

        if (passwordInput.value.length <= 0) {
            document.querySelector('[data-valmsg-for="UserPasswordForReset"]').textContent = "*";
            passwordMatchMessage.textContent = "Passwords do not match!";
            submitButton.disabled = true;
        }

        if (confirmPasswordInput.value.length <= 0) {
            document.querySelector('[data-valmsg-for="UserConfirmPassword"]').textContent = "*";
            passwordMatchMessage.textContent = "Passwords do not match!";
            submitButton.disabled = true;
        }

        if (password === confirmPassword && passwordInput.value.length > 0) {
            passwordMatchMessage.textContent = "Passwords match!";
            passwordMatchMessage.style.color = "green";
            submitButton.disabled = false;
        }

        else {
            passwordMatchMessage.textContent = "Passwords do not match!";
            passwordMatchMessage.style.color = "red";
            submitButton.disabled = true;
        }
    }

    passwordInput.addEventListener("input", checkPasswordMatch);
    confirmPasswordInput.addEventListener("input", checkPasswordMatch);
</script>